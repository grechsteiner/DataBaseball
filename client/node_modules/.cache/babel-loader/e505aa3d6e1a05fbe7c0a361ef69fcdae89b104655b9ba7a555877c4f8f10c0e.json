{"ast":null,"code":"var _jsxFileName = \"D:\\\\2B\\\\cs348\\\\Project\\\\baseball-app\\\\client\\\\src\\\\pages\\\\AllPlayers.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\n\n// Search All Players page\n\n/* Current problem with AllPlayers: \r\n  In prod db, there will be thousands of entries in players...\r\n  cannot load all of them and then filter.\r\n\r\n  Possible solutions: \r\n  - Send SQL queries each time the user presses 'enter' and does a search\r\n    (returns nothing until there is an exact match)\r\n  - Pagination: display only (ex. 20) entries at a time, and go to the next page.\r\n    (able to concat in frontend first and last names, and filter from there)\r\n\r\n    Pagination is more professional...but it'll take me some time to figure it out\r\n    so I'm leaning towards pagination being a \"fancy\" feature in later milestone\r\n    Right now all players has the quick and dirty solution of selecting all b/c the db is small\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Players() {\n  _s();\n  const [listOfPlayers, setListOfPlayers] = useState([]);\n  const [name, setName] = useState(\"\");\n  useEffect(() => {\n    fetch(\"http://localhost:3001/allplayers\", {}).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        console.log(\"FETCH failed\");\n      }\n    }).then(data => {\n      if (data.error) {\n        console.log(data.error);\n      } else {\n        setListOfPlayers(data);\n      }\n    }).catch(error => console.log(\"ERROR\", error));\n  }, []);\n  function handleChange(event) {\n    setName(event.target.value);\n  }\n  function checkName(player) {\n    return player.nameLast.toLowerCase().includes(name.toLowerCase());\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Players\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"player\",\n      onChange: handleChange,\n      placeholder: \"Search by Last name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), listOfPlayers.filter(checkName).map(player => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerName\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)\n    }, player.ID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(Players, \"4ixRCQ5efkfyoKfKZAPZJetIPG8=\");\n_c = Players;\nexport default Players;\nvar _c;\n$RefreshReg$(_c, \"Players\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Players","_s","listOfPlayers","setListOfPlayers","name","setName","fetch","then","res","ok","json","console","log","data","error","catch","handleChange","event","target","value","checkName","player","nameLast","toLowerCase","includes","className","children","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","filter","map","ID","_c","$RefreshReg$"],"sources":["D:/2B/cs348/Project/baseball-app/client/src/pages/AllPlayers.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\n// Search All Players page\r\n\r\n/* Current problem with AllPlayers: \r\n  In prod db, there will be thousands of entries in players...\r\n  cannot load all of them and then filter.\r\n\r\n  Possible solutions: \r\n  - Send SQL queries each time the user presses 'enter' and does a search\r\n    (returns nothing until there is an exact match)\r\n  - Pagination: display only (ex. 20) entries at a time, and go to the next page.\r\n    (able to concat in frontend first and last names, and filter from there)\r\n\r\n    Pagination is more professional...but it'll take me some time to figure it out\r\n    so I'm leaning towards pagination being a \"fancy\" feature in later milestone\r\n    Right now all players has the quick and dirty solution of selecting all b/c the db is small\r\n*/\r\n\r\nfunction Players() {\r\n    const [listOfPlayers, setListOfPlayers] = useState([]);\r\n    const [name, setName] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        fetch(\"http://localhost:3001/allplayers\", {})\r\n          .then((res) => {\r\n            if (res.ok) {\r\n              return res.json();\r\n            } else {\r\n              console.log(\"FETCH failed\");\r\n            }\r\n          })\r\n          .then((data) => {\r\n            if (data.error) {\r\n              console.log(data.error);\r\n            } else {\r\n              setListOfPlayers(data);\r\n            }\r\n          })\r\n          .catch((error) => console.log(\"ERROR\", error));\r\n      }, []);\r\n\r\n    function handleChange(event) {\r\n        setName(event.target.value);\r\n    }\r\n    \r\n    function checkName(player) {\r\n        return player.nameLast.toLowerCase().includes(name.toLowerCase());\r\n    }\r\n\r\n  return (\r\n    <div className=\"Players\">\r\n        <input\r\n        name=\"player\"\r\n        onChange={handleChange}\r\n        placeholder=\"Search by Last name\"\r\n      />\r\n      {listOfPlayers.filter(checkName).map((player) => (\r\n        <div className=\"playerName\" key={player.ID}>\r\n          <h4>\r\n            {/* {player.nameFirst} {player.nameLast} */}\r\n            {}\r\n          </h4> \r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Players;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAE3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA,SAAAC,MAAA,IAAAC,OAAA;AAeA,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACZU,KAAK,CAAC,kCAAkC,EAAE,CAAC,CAAC,CAAC,CAC1CC,IAAI,CAAEC,GAAG,IAAK;MACb,IAAIA,GAAG,CAACC,EAAE,EAAE;QACV,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;MACnB,CAAC,MAAM;QACLC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC7B;IACF,CAAC,CAAC,CACDL,IAAI,CAAEM,IAAI,IAAK;MACd,IAAIA,IAAI,CAACC,KAAK,EAAE;QACdH,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,KAAK,CAAC;MACzB,CAAC,MAAM;QACLX,gBAAgB,CAACU,IAAI,CAAC;MACxB;IACF,CAAC,CAAC,CACDE,KAAK,CAAED,KAAK,IAAKH,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEE,KAAK,CAAC,CAAC;EAClD,CAAC,EAAE,EAAE,CAAC;EAER,SAASE,YAAYA,CAACC,KAAK,EAAE;IACzBZ,OAAO,CAACY,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC/B;EAEA,SAASC,SAASA,CAACC,MAAM,EAAE;IACvB,OAAOA,MAAM,CAACC,QAAQ,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACpB,IAAI,CAACmB,WAAW,CAAC,CAAC,CAAC;EACrE;EAEF,oBACExB,OAAA;IAAK0B,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACpB3B,OAAA;MACAK,IAAI,EAAC,QAAQ;MACbuB,QAAQ,EAAEX,YAAa;MACvBY,WAAW,EAAC;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,EACD9B,aAAa,CAAC+B,MAAM,CAACb,SAAS,CAAC,CAACc,GAAG,CAAEb,MAAM,iBAC1CtB,OAAA;MAAK0B,SAAS,EAAC,YAAY;MAAAC,QAAA,eACzB3B,OAAA;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGI;IAAC,GAJ0BX,MAAM,CAACc,EAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKrC,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC/B,EAAA,CAhDQD,OAAO;AAAAoC,EAAA,GAAPpC,OAAO;AAkDhB,eAAeA,OAAO;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}