{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\n\n// Leaderboard page\n\nfunction Leaderboard() {\n  _s();\n  const [listOfPlayers, setListOfPlayers] = useState([]);\n  useEffect(() => {\n    // fetch always succeeds (besides network error), so need additional error checking\n    fetch(\"http://localhost:3001/leaderboard\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        year: 2022,\n        minGames: data.password\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        console.log(\"FETCH failed\");\n      }\n    }).then(data => {\n      if (data.error) {\n        console.log(data.error);\n      } else {\n        setListOfPlayers(data);\n      }\n    }).catch(error => console.log(\"ERROR\", error));\n  }, []);\n}\n_s(Leaderboard, \"cmryiaZXUcziKmoAkM6SoxklFMg=\");\n_c = Leaderboard;\nexport default Leaderboard;\nvar _c;\n$RefreshReg$(_c, \"Leaderboard\");","map":{"version":3,"names":["React","useEffect","useState","Leaderboard","_s","listOfPlayers","setListOfPlayers","fetch","method","headers","body","JSON","stringify","year","minGames","data","password","then","res","ok","json","console","log","error","catch","_c","$RefreshReg$"],"sources":["D:/2B/cs348/Project/baseball-app/client/src/pages/Leaderboard.js"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\n// Leaderboard page\r\n\r\nfunction Leaderboard() {\r\n    const [listOfPlayers, setListOfPlayers] = useState([]);\r\n    useEffect(() => {\r\n        // fetch always succeeds (besides network error), so need additional error checking\r\n        fetch(\"http://localhost:3001/leaderboard\", {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n              body: JSON.stringify({\r\n                year: 2022,\r\n                minGames: data.password,\r\n              }),\r\n        })\r\n          .then((res) => {\r\n            if (res.ok) {\r\n              return res.json();\r\n            } else {\r\n              console.log(\"FETCH failed\");\r\n            }\r\n          })\r\n          .then((data) => {\r\n            if (data.error) {\r\n              console.log(data.error);\r\n            } else {\r\n              setListOfPlayers(data);\r\n            }\r\n          })\r\n          .catch((error) => console.log(\"ERROR\", error));\r\n      }, []);\r\n\r\n}\r\n\r\nexport default Leaderboard;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAE3C;;AAEA,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACtDD,SAAS,CAAC,MAAM;IACZ;IACAM,KAAK,CAAC,mCAAmC,EAAE;MACvCC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAE,IAAI;QACVC,QAAQ,EAAEC,IAAI,CAACC;MACjB,CAAC;IACP,CAAC,CAAC,CACCC,IAAI,CAAEC,GAAG,IAAK;MACb,IAAIA,GAAG,CAACC,EAAE,EAAE;QACV,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;MACnB,CAAC,MAAM;QACLC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC7B;IACF,CAAC,CAAC,CACDL,IAAI,CAAEF,IAAI,IAAK;MACd,IAAIA,IAAI,CAACQ,KAAK,EAAE;QACdF,OAAO,CAACC,GAAG,CAACP,IAAI,CAACQ,KAAK,CAAC;MACzB,CAAC,MAAM;QACLjB,gBAAgB,CAACS,IAAI,CAAC;MACxB;IACF,CAAC,CAAC,CACDS,KAAK,CAAED,KAAK,IAAKF,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEC,KAAK,CAAC,CAAC;EAClD,CAAC,EAAE,EAAE,CAAC;AAEZ;AAACnB,EAAA,CA/BQD,WAAW;AAAAsB,EAAA,GAAXtB,WAAW;AAiCpB,eAAeA,WAAW;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}