// "main file"
// Contains all backend APIs

//---------Headers---------//

import express from "express";
import cors from "cors";
import bcrypt from "bcrypt"
import jwt from 'jsonwebtoken';
import { getAllPlayers, getLeaders, getPlayerByID, RegisterNewUser, findUserID } from "./database.js"; // This syntax is for "destructuring", a javascript technique to extract values from an object
import { validateToken } from "./middlewares/AuthMiddleware.js";


const app = express();
const { sign } = jwt;

app.use(express.json());
app.use(cors());

//-------------------------------------//

app.use((err, req, res, next) => {
  // Express 5 middleware
  console.error(err.stack);
  res.status(500).send("Something broke!");
});

// ------------API's-------------------//

// URL/path: domain/people, so you can call this API by typing localhost:3000/player
app.get("/allplayers", validateToken, async (req, res) => {
  const players = await getAllPlayers(20); // placeholder constant 20
  res.send(players);
});

app.get("/allplayers/:playerID", validateToken, async (req, res) => {
  const player = await getPlayerByID(req.params.playerID);
  res.send(player); // Send response back to frontend
});

app.get("/leaderboard", validateToken, async (req, res) => {
  const { column, orderDirection } = req.query;
  try {
    const players = await getLeaders(column, orderDirection);
    res.send(players); // Send response back to frontend
  } catch (error) {
    res.status(500).json({ error: "Internal Server Error" });
  }
});

app.post("/register", async (req, res) => {
  const { userID, nameFirst, nameLast, pwd } = req.body;

  if (!userID || !nameFirst || !nameLast || !pwd) {
    return res.status(400).json({ error: "All fields are required" }); 
  }

  try {
    const newUser = await RegisterNewUser(userID, nameFirst, nameLast, pwd)
    res.status(201).json({ message: `User ${userID} registered successfully` }); // res.json gets sent back to client
  } catch (error) {
    res.status(500).json({ error: error });
  }
});

app.post("/login", async (req, res) => {
  const { userID, pwd } = req.body;
  const user = await findUserID(userID)

  if (!user) {
    return res.json({ error: "User does not exist" });
  }
  
  bcrypt.compare(pwd, user.pwd).then((match) => {
    // check if inputted password matches pwd associated with username
    if (!match) {
      return res.json({ error: "The username or password is incorrect" });
    }
      
    const accessToken = sign({ userID: user.userID }, "8waH28nEHUwE") // create token with userID
    return res.json(accessToken);
  });

});


// Crash course on Javascript:
// In JS, you can have asynchronous code to execute "in the background" (JS is single-threaded so you won't
// have truly concurrent lines running. async indicates that code inside the function may not run one line after the other
// Declaring functions as asynchronous returns a Promise, which is an object representing the "status" of an
// async function (pending, fulfilled, rejected)
// IMPORTANT: By using "await", the program will wait until the Promise resolves or rejects, and
// return whatever result is generated by the line using "await"
// "await" is necessary if later lines of code use data from the current line

// Add more API's here...

//---------------------------------------//

// NOTE: Implement routing for Milestone 2...?

app.listen(3001, () => {
  console.log("Server is running on port 3001");
});

/**
 * app.get("/leaderboard", async (req, res) => {
    try {
        // Convert query params into base ten integers
        const year = parseInt(req.query.year, 10);
        const minGames = parseInt(req.query.minGames, 10);

        // Check if input params are valid
        if (isNaN(year) || isNaN(minGames)) {
          return res.status(400).json({ error: 'Invalid query parameters' });
        }
    
        const players = await getBatting(year, minGames)
        res.send(players); // Send response back to frontend
      } 
      catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Internal Server Error' });
      }
})
 */
